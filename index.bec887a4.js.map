{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ function $3d28d7f1aac198f5$var$deepCopyArray(array) {\n    return array.map(function(item) {\n        return Array.isArray(item) ? $3d28d7f1aac198f5$var$deepCopyArray(item) : item;\n    });\n}\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.score = 0;\n        this.status = \"idle\";\n        this.initialState = $3d28d7f1aac198f5$var$deepCopyArray(initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        this.board = $3d28d7f1aac198f5$var$deepCopyArray(this.initialState);\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"addNewCell\",\n            value: function addNewCell() {\n                var emptyCells = [];\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = emptyCells[Math.floor(Math.random() * emptyCells.length)], row1 = _emptyCells_Math_floor.row, col1 = _emptyCells_Math_floor.col;\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return;\n                this.move(function(row) {\n                    return row;\n                }, function(board, newRow, rowIndex) {\n                    for(var col = 0; col < 4; col++)board[rowIndex][col] = newRow[col];\n                });\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status !== \"playing\") return;\n                this.move(function(row) {\n                    return row.slice().reverse();\n                }, function(board, newRow, rowIndex) {\n                    for(var col = 0; col < 4; col++)board[rowIndex][col] = newRow[3 - col];\n                });\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                this.move(function(row, index) {\n                    return _this.board.map(function(rowItem) {\n                        return rowItem[index];\n                    });\n                }, function(board, newRow, colIndex) {\n                    for(var row = 0; row < 4; row++)board[row][colIndex] = newRow[row];\n                });\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                if (this.status !== \"playing\") return;\n                this.move(function(row, index) {\n                    return _this.board.map(function(rowItem) {\n                        return rowItem[index];\n                    }).reverse();\n                }, function(board, newRow, colIndex) {\n                    newRow.reverse();\n                    for(var row = 0; row < 4; row++)board[row][colIndex] = newRow[row];\n                });\n            }\n        },\n        {\n            key: \"move\",\n            value: function move(extractRow, insertRow) {\n                var moved = false;\n                for(var i = 0; i < 4; i++){\n                    var row = extractRow(this.board[i], i);\n                    var newRow = this.combine(row);\n                    if (newRow.join(\"\") !== row.join(\"\")) moved = true;\n                    insertRow(this.board, newRow, i);\n                }\n                if (moved) {\n                    this.addNewCell();\n                    this.checkGameStatus();\n                }\n            }\n        },\n        {\n            key: \"combine\",\n            value: function combine(inputRow) {\n                var row = inputRow.filter(function(cell) {\n                    return cell !== 0;\n                });\n                var scoreDelta = 0;\n                var newRow = [];\n                for(var i = 0; i < row.length; i++)if (row[i] === row[i + 1]) {\n                    newRow.push(row[i] * 2);\n                    scoreDelta += row[i] * 2;\n                    row[i + 1] = 0;\n                    i++;\n                } else newRow.push(row[i]);\n                this.score += scoreDelta;\n                while(newRow.length < 4)newRow.push(0);\n                return newRow;\n            }\n        },\n        {\n            key: \"checkGameStatus\",\n            value: function checkGameStatus() {\n                if (this.board.flat().includes(2048)) this.status = \"win\";\n                else if (!this.canMove()) this.status = \"lose\";\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 0) return true;\n                    if (col !== 3 && this.board[row][col] === this.board[row][col + 1]) return true;\n                    if (row !== 3 && this.board[row][col] === this.board[row + 1][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status !== \"idle\") return;\n                this.status = \"playing\";\n                this.addNewCell();\n                this.addNewCell();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = $3d28d7f1aac198f5$var$deepCopyArray(this.initialState);\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$arrowKeys = {\n    left: \"ArrowLeft\",\n    right: \"ArrowRight\",\n    up: \"ArrowUp\",\n    down: \"ArrowDown\"\n};\nfunction $197cd56b15c33885$var$initializeGame() {\n    var boardElement = document.querySelector(\".game-field\");\n    var scoreElement = document.querySelector(\".game-score\");\n    var button = document.querySelector(\".start\");\n    var messageStart = document.querySelector(\".message-start\");\n    var messageLose = document.querySelector(\".message-lose\");\n    var messageWin = document.querySelector(\".message-win\");\n    function renderBoard() {\n        boardElement.innerHTML = \"\";\n        $197cd56b15c33885$var$game.getState().forEach(function(row) {\n            var rowElement = document.createElement(\"tr\");\n            rowElement.classList.add(\"field-row\");\n            row.forEach(function(cell) {\n                var cellElement = document.createElement(\"td\");\n                cellElement.classList.add(\"field-cell\");\n                if (cell !== 0) {\n                    cellElement.classList.add(\"field-cell--\".concat(cell));\n                    cellElement.textContent = cell;\n                }\n                rowElement.appendChild(cellElement);\n            });\n            boardElement.appendChild(rowElement);\n        });\n    }\n    function renderScore() {\n        scoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n    }\n    function renderStatus() {\n        messageStart.classList.toggle(\"hidden\", $197cd56b15c33885$var$game.getStatus() !== \"idle\");\n        messageLose.classList.toggle(\"hidden\", $197cd56b15c33885$var$game.getStatus() !== \"lose\");\n        messageWin.classList.toggle(\"hidden\", $197cd56b15c33885$var$game.getStatus() !== \"win\");\n    }\n    button.addEventListener(\"click\", function() {\n        var buttonText = button.textContent;\n        if (buttonText === \"Start\") {\n            $197cd56b15c33885$var$game.start();\n            button.textContent = \"Restart\";\n            button.classList.replace(\"start\", \"restart\");\n        } else {\n            $197cd56b15c33885$var$game.restart();\n            renderScore(0);\n            button.textContent = \"Start\";\n            button.classList.replace(\"restart\", \"start\");\n        }\n        renderBoard();\n        renderScore();\n        renderStatus();\n    });\n    document.addEventListener(\"keydown\", function(keyEvent) {\n        var key = keyEvent.key;\n        if (Object.values($197cd56b15c33885$var$arrowKeys).includes(key)) {\n            keyEvent.preventDefault();\n            switch(key){\n                case $197cd56b15c33885$var$arrowKeys.left:\n                    $197cd56b15c33885$var$game.moveLeft();\n                    break;\n                case $197cd56b15c33885$var$arrowKeys.right:\n                    $197cd56b15c33885$var$game.moveRight();\n                    break;\n                case $197cd56b15c33885$var$arrowKeys.up:\n                    $197cd56b15c33885$var$game.moveUp();\n                    break;\n                case $197cd56b15c33885$var$arrowKeys.down:\n                    $197cd56b15c33885$var$game.moveDown();\n                    break;\n            }\n            renderBoard();\n            renderScore();\n            renderStatus();\n        }\n    });\n}\ndocument.addEventListener(\"DOMContentLoaded\", $197cd56b15c33885$var$initializeGame);\n\n})();\n//# sourceMappingURL=index.bec887a4.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst arrowKeys = {\n  left: 'ArrowLeft',\n  right: 'ArrowRight',\n  up: 'ArrowUp',\n  down: 'ArrowDown',\n};\n\nfunction initializeGame() {\n  const boardElement = document.querySelector('.game-field');\n  const scoreElement = document.querySelector('.game-score');\n  const button = document.querySelector('.start');\n  const messageStart = document.querySelector('.message-start');\n  const messageLose = document.querySelector('.message-lose');\n  const messageWin = document.querySelector('.message-win');\n\n  function renderBoard() {\n    boardElement.innerHTML = '';\n\n    game.getState().forEach((row) => {\n      const rowElement = document.createElement('tr');\n\n      rowElement.classList.add('field-row');\n\n      row.forEach((cell) => {\n        const cellElement = document.createElement('td');\n\n        cellElement.classList.add('field-cell');\n\n        if (cell !== 0) {\n          cellElement.classList.add(`field-cell--${cell}`);\n          cellElement.textContent = cell;\n        }\n        rowElement.appendChild(cellElement);\n      });\n      boardElement.appendChild(rowElement);\n    });\n  }\n\n  function renderScore() {\n    scoreElement.textContent = game.getScore();\n  }\n\n  function renderStatus() {\n    messageStart.classList.toggle('hidden', game.getStatus() !== 'idle');\n    messageLose.classList.toggle('hidden', game.getStatus() !== 'lose');\n    messageWin.classList.toggle('hidden', game.getStatus() !== 'win');\n  }\n\n  button.addEventListener('click', () => {\n    const buttonText = button.textContent;\n\n    if (buttonText === 'Start') {\n      game.start();\n      button.textContent = 'Restart';\n      button.classList.replace('start', 'restart');\n    } else {\n      game.restart();\n      renderScore(0);\n      button.textContent = 'Start';\n      button.classList.replace('restart', 'start');\n    }\n    renderBoard();\n    renderScore();\n    renderStatus();\n  });\n\n  document.addEventListener('keydown', (keyEvent) => {\n    const key = keyEvent.key;\n\n    if (Object.values(arrowKeys).includes(key)) {\n      keyEvent.preventDefault();\n\n      switch (key) {\n        case arrowKeys.left:\n          game.moveLeft();\n          break;\n        case arrowKeys.right:\n          game.moveRight();\n          break;\n        case arrowKeys.up:\n          game.moveUp();\n          break;\n        case arrowKeys.down:\n          game.moveDown();\n          break;\n      }\n      renderBoard();\n      renderScore();\n      renderStatus();\n    }\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nfunction deepCopyArray(array) {\n  return array.map(function (item) {\n    return Array.isArray(item) ? deepCopyArray(item) : item;\n  });\n}\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.score = 0;\n    this.status = 'idle';\n\n    this.initialState = deepCopyArray(\n      initialState || [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ],\n    );\n    this.board = deepCopyArray(this.initialState);\n  }\n\n  addNewCell() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const { row, col } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.move(\n      (row) => row,\n      (board, newRow, rowIndex) => {\n        for (let col = 0; col < 4; col++) {\n          board[rowIndex][col] = newRow[col];\n        }\n      },\n    );\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.move(\n      (row) => row.slice().reverse(),\n      (board, newRow, rowIndex) => {\n        for (let col = 0; col < 4; col++) {\n          board[rowIndex][col] = newRow[3 - col];\n        }\n      },\n    );\n  }\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.move(\n      (row, index) => this.board.map((rowItem) => rowItem[index]),\n      (board, newRow, colIndex) => {\n        for (let row = 0; row < 4; row++) {\n          board[row][colIndex] = newRow[row];\n        }\n      },\n    );\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    this.move(\n      (row, index) => this.board.map((rowItem) => rowItem[index]).reverse(),\n      (board, newRow, colIndex) => {\n        newRow.reverse();\n\n        for (let row = 0; row < 4; row++) {\n          board[row][colIndex] = newRow[row];\n        }\n      },\n    );\n  }\n\n  move(extractRow, insertRow) {\n    let moved = false;\n\n    for (let i = 0; i < 4; i++) {\n      const row = extractRow(this.board[i], i);\n      const newRow = this.combine(row);\n\n      if (newRow.join('') !== row.join('')) {\n        moved = true;\n      }\n      insertRow(this.board, newRow, i);\n    }\n\n    if (moved) {\n      this.addNewCell();\n      this.checkGameStatus();\n    }\n  }\n\n  combine(inputRow) {\n    const row = inputRow.filter((cell) => cell !== 0);\n    let scoreDelta = 0;\n    const newRow = [];\n\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === row[i + 1]) {\n        newRow.push(row[i] * 2);\n        scoreDelta += row[i] * 2;\n        row[i + 1] = 0;\n        i++;\n      } else {\n        newRow.push(row[i]);\n      }\n    }\n\n    this.score += scoreDelta;\n\n    while (newRow.length < 4) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  checkGameStatus() {\n    if (this.board.flat().includes(2048)) {\n      this.status = 'win';\n    } else {\n      if (!this.canMove()) {\n        this.status = 'lose';\n      }\n    }\n  }\n\n  canMove() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return true;\n        }\n\n        if (col !== 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return true;\n        }\n\n        if (row !== 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status !== 'idle') {\n      return;\n    }\n\n    this.status = 'playing';\n    this.addNewCell();\n    this.addNewCell();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.board = deepCopyArray(this.initialState);\n    this.score = 0;\n    this.status = 'idle';\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$3d28d7f1aac198f5$var$deepCopyArray","array","map","item","Array","isArray","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","score","status","board","key","value","emptyCells","row","col","push","length","_emptyCells_Math_floor","Math","floor","random","row1","col1","move","newRow","rowIndex","slice","reverse","_this","index","rowItem","colIndex","extractRow","insertRow","moved","i","combine","join","addNewCell","checkGameStatus","inputRow","filter","cell","scoreDelta","flat","includes","canMove","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","prototype","$197cd56b15c33885$var$arrowKeys","left","right","up","down","document","addEventListener","boardElement","querySelector","scoreElement","button","messageStart","messageLose","messageWin","renderBoard","innerHTML","getState","forEach","rowElement","createElement","classList","add","cellElement","concat","textContent","appendChild","renderScore","getScore","renderStatus","toggle","getStatus","buttonText","start","replace","restart","keyEvent","values","preventDefault","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.bec887a4.js.map"}